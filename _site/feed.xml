<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bo&#39;s Blog</title>
    <description>Bo&#39;s blog.</description>
    <link>http://www.bo-yang.net//</link>
    <atom:link href="http://www.bo-yang.net//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Generate Wireshark-Understandable Hexdump</title>
        <description>&lt;p&gt;When debugging network packets in Click, usually the packets are printed to screen as hex string:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c2ef0a00 00918843 e138a72b 08004500 003cd373 40004006 58ac0202 020a0a00
0091aae6 0016b446 7f860000 0000a002 39082c11 00000204 05b40402 080acf40
26400000 00000103 0307
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s time-consuming and error-prone to analyze the hex-string by hand. A very good tool to parse the hex packets is Wireshark. According to &lt;a href=&quot;https://www.wireshark.org/docs/wsug_html_chunked/ChIOImportSection.html&quot;&gt;Wireshark Manual&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wireshark understands a hexdump of the form generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;od -Ax -tx1 -v&lt;/code&gt;. In other words, each byte is individually displayed and surrounded with a space. Each line begins with an offset describing the position in the file. The offset is a hex number (can also be octal or decimal), of more than two hex digits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make Wireshark understands the above hex string, it should be formated into:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000000 c2 ef 0a 00 00 91 88 43  e1 38 a7 2b 08 00 45 00
000010 00 3c d3 73 40 00 40 06  58 ac 02 02 02 0a 0a 00
000020 00 91 aa e6 00 16 b4 46  7f 86 00 00 00 00 a0 02
000030 39 08 2c 11 00 00 02 04  05 b4 04 02 08 0a cf 40
000040 26 40 00 00 00 00 01 03  03 07
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once got the hexdump file, it can be parsed by Wireshark using the “&lt;strong&gt;File-&amp;gt;Import from Hex Dump&lt;/strong&gt;” dialog box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.wireshark.org/docs/wsug_html_chunked/wsug_graphics/ws-file-import.png&quot; alt=&quot;import_from_hex_dump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To automatically generate the hexdump file, a &lt;a href=&quot;https://github.com/bo-yang/misc/blob/master/gen_hexdump.cc&quot;&gt;C++ tool &lt;code class=&quot;highlighter-rouge&quot;&gt;gen_hexdump&lt;/code&gt;&lt;/a&gt; is developed. Usage:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gen_hexdump [-i input_file] [-n] [-s hex_str] -o out_file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;format a single hex string:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gen_hexdump -o &amp;lt;output&amp;gt; -s &amp;lt;hex_string&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format a single packet in a file:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gen_hexdump -n -i &amp;lt;input&amp;gt; -o &amp;lt;output&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;format multiple packets from a file(one packet per line):&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gen_hexdump -i &amp;lt;input&amp;gt; -o &amp;lt;output&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.wireshark.org/docs/wsug_html_chunked/ChIOImportSection.html&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 -0800</pubDate>
        <link>http://www.bo-yang.net//network/c/c++/click/2016/01/26/gen-hex-dump/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//network/c/c++/click/2016/01/26/gen-hex-dump/</guid>
      </item>
    
      <item>
        <title>A Complete Guide For Installing TFTP Server In CentOS 7</title>
        <description>&lt;p&gt;Since CentOS 7(or RedHat 7) is quite different from CentOS 6.x, most notes online for installing TFTP server in CentOS are obsolete already. This post not only summarizes the procedure of installing &amp;amp; configuring TFTP server, but also introduces a general strategy of configuring network services in CentOS 7.&lt;/p&gt;

&lt;h3 id=&quot;install-tftp-server&quot;&gt;1. Install &lt;code class=&quot;highlighter-rouge&quot;&gt;tftp-server&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;TFTP server can be installed using following command, where &lt;code class=&quot;highlighter-rouge&quot;&gt;xinetd&lt;/code&gt; is necessary.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install tftp tftp-server* xinetd*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/xinetd.d/tftp&lt;/code&gt; - set &lt;code class=&quot;highlighter-rouge&quot;&gt;disable&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;no&lt;/code&gt; and add &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; option into &lt;code class=&quot;highlighter-rouge&quot;&gt;server_args&lt;/code&gt; if you need to upload files to TFTP server from client.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service tftp
{
	socket_type		= dgram
	protocol		= udp
	wait			= yes
	user			= root
	server			= /usr/sbin/in.tftpd
	server_args		= -c -s /tftpboot
	disable			= no
	per_source		= 11
	cps			    = 100 2
	flags			= IPv4
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;enable-tftp-service&quot;&gt;2. Enable TFTP Service&lt;/h3&gt;

&lt;p&gt;The CentOS 7 services(&lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt;) can be configured from files under &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/systemd/system/&lt;/code&gt;. Go to this dir, and edit &lt;code class=&quot;highlighter-rouge&quot;&gt;tftp.service&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost system]# cat tftp.service
[Unit]
Description=Tftp Server

[Service]
ExecStart=/usr/sbin/in.tftpd -c -s /tftpboot
StandardInput=socket

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The default &lt;code class=&quot;highlighter-rouge&quot;&gt;tftp.service&lt;/code&gt; doesn’t have the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Install]&lt;/code&gt; unit, but it’s required by &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt;. Besides, the tftpd options also need to be changed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecStart&lt;/code&gt; entry.&lt;/p&gt;

&lt;p&gt;Although &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; commands are deprecated in CentOS 7, they are still available but simply redirected to &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;. So you still can use &lt;code class=&quot;highlighter-rouge&quot;&gt;service xinetd start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;service tftp start&lt;/code&gt; to start &lt;code class=&quot;highlighter-rouge&quot;&gt;xinetd&lt;/code&gt; and TFTP.&lt;/p&gt;

&lt;p&gt;However, to make them automatically start after boot, following commands are needed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost system]# systemctl enable xinetd
[root@localhost system]# systemctl enable tftp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After these two commands, permanent links will be made for  &lt;code class=&quot;highlighter-rouge&quot;&gt;xinetd&lt;/code&gt; and TFTP services.&lt;/p&gt;

&lt;h3 id=&quot;configure-selinux&quot;&gt;3. Configure SELinux&lt;/h3&gt;

&lt;p&gt;In CentOS 7, the SELinux is not supposed to be disabled(the system will abort booting if you disable SELinux). So the TFTP read and write must be allowed in SELinux. By default, the SELinux uses &lt;code class=&quot;highlighter-rouge&quot;&gt;enforcing&lt;/code&gt; policy, which does not accept any change. To make any change to SELinux, first modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/selinux/config&lt;/code&gt; and change the policy to &lt;code class=&quot;highlighter-rouge&quot;&gt;permissive&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[bo@ucs-c200 notes]$ cat /etc/selinux/config 

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=permissive
# SELINUXTYPE= can take one of three two values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected. 
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then reboot the system. After system boot up, check SELinux status:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost system]# sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   permissive
Mode from config file:          permissive
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      28
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then check the tftp permissions in SELinux:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost bobyan]# getsebool -a | grep tftp
tftp_anon_write --&amp;gt; off
tftp_home_dir --&amp;gt; off
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the TFTP write is off as shown above, enable it with &lt;code class=&quot;highlighter-rouge&quot;&gt;setsebool&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost bobyan]# setsebool -P tftp_anon_write 1
[root@localhost bobyan]# setsebool -P tftp_home_dir 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above changes to SELinux are permanent, so no need to change any SELinux config files any more.&lt;/p&gt;

&lt;h3 id=&quot;configure-firewalld&quot;&gt;4. Configure &lt;code class=&quot;highlighter-rouge&quot;&gt;firewalld&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Unlike CentOS 6.x, the &lt;code class=&quot;highlighter-rouge&quot;&gt;firewalld&lt;/code&gt; is used to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt; as default firewall in CentOS 7. Fortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;iptable&lt;/code&gt; config file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/sysconfig/iptables&lt;/code&gt; is also used by &lt;code class=&quot;highlighter-rouge&quot;&gt;firewalld&lt;/code&gt;. So to allow TFTP services, following line should be added to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/sysconfig/iptables&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-A INPUT -m state --state NEW -m udp -p udp -m udp --dport 69 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then restart &lt;code class=&quot;highlighter-rouge&quot;&gt;firewalld&lt;/code&gt; using command &lt;code class=&quot;highlighter-rouge&quot;&gt;firewall-cmd --reload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A more standard way to allow TFTP is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;firewall-cmd&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd --zone=public --add-service=tftp --permanent
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where the &lt;code class=&quot;highlighter-rouge&quot;&gt;--permanent&lt;/code&gt; option is used to permanently enable the TFTP port. Command &lt;code class=&quot;highlighter-rouge&quot;&gt;firewall-cmd --reload&lt;/code&gt; is needed every time changing the firewall config.&lt;/p&gt;

&lt;p&gt;To check the status or enable &lt;code class=&quot;highlighter-rouge&quot;&gt;firewalld&lt;/code&gt;, following commands can be used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status firewalld
systemctl enable firewalld
systemctl start firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 31 Aug 2015 00:00:00 -0700</pubDate>
        <link>http://www.bo-yang.net//notes/unix/linux/2015/08/31/centos7-install-tftp-server/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/unix/linux/2015/08/31/centos7-install-tftp-server/</guid>
      </item>
    
      <item>
        <title>How To Use Local Facilities For Logging?</title>
        <description>&lt;p&gt;This post introduces how to configure and use syslogd-compatible syslog tools. These tips should be supported by rsyslog, but rsyslog-specific commands are not covered.&lt;/p&gt;

&lt;p&gt;As documented in the man page, the Linux system log is configured in file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/syslog.conf&lt;/code&gt; by default.You can specify other config file with &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; option for syslogd. The format of syslog config file is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;facility&amp;gt;.&amp;lt;priority&amp;gt;   [logfile]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The supported facilities and priorites are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog.h&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_EMERG	0	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* system is unusable */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_ALERT	1	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* action must be taken immediately */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_CRIT	2	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* critical conditions */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_ERR		3	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* error conditions */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_WARNING	4	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* warning conditions */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_NOTICE	5	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* normal but significant condition */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_INFO	6	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* informational */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_DEBUG	7	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* debug-level messages */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    
    &lt;span class=&quot;cm&quot;&gt;/* facility codes */&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#define	LOG_KERN	(0&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* kernel messages */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_USER	(1&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* random user-level messages */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_MAIL	(2&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* mail system */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_DAEMON	(3&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* system daemons */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_AUTH	(4&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* security/authorization messages */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_SYSLOG	(5&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* messages generated internally by syslogd */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LPR		(6&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* line printer subsystem */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_NEWS	(7&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* network news subsystem */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_UUCP	(8&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* UUCP subsystem */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_CRON	(9&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* clock daemon */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_AUTHPRIV	(10&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* security/authorization messages (private) */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_FTP		(11&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* ftp daemon */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    
    &lt;span class=&quot;cm&quot;&gt;/* other codes through 15 reserved for system use */&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL0	(16&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL1	(17&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL2	(18&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL3	(19&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL4	(20&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL5	(21&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL6	(22&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#define	LOG_LOCAL7	(23&amp;lt;&amp;lt;3)	&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* reserved for local use */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The local facilities can be used for redirecting/filtering the log of your own programs. For example, given a program &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, if you want to log all the non-critical messages in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/foo.log&lt;/code&gt;, and make the critical logs go to system log file &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/messages&lt;/code&gt;, you can use the following config file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# use facility local1 for foo logs
local1.debug;local1.info;local1.notice;local1.warn   -/var/log/foo.log
local1.panic;local1.alert;local1.crit;local1.err   -/var/log/messages
*.*;local1.none   /var/log/messages 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The special priority &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt; prevents those messages from being logged even though they would have been included in the &lt;em&gt;.&lt;/em&gt;. In the above config, all facilities except for &lt;code class=&quot;highlighter-rouge&quot;&gt;local1&lt;/code&gt; will be logged to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/messages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the dash(-) in front of the log filename is not documented in the man page, but it turns out to mean “Don’t sync after every write to the file”. Except that rsyslogd won’t sync anyway, unless you add a special directive in the Global Directives section. Note that you might lose information if the system crashes right behind a write attempt. Nevertheless this might give you back some performance, especially if you run programs that use logging in a very verbose manner. So for most people, a dash makes no difference one way or the other – it will be ignored.&lt;/p&gt;

&lt;p&gt;And in program &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, what you need to do is open log file by specifing &lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_LOCAL1&lt;/code&gt; facility. The use of &lt;code class=&quot;highlighter-rouge&quot;&gt;openlog()&lt;/code&gt; is mandatory here. Otherwise, it will automatically be called by syslog(), in which case facility will default to &lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_USER&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;syslog.h&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;openlog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOG_LOCAL1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test info log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* go to /var/log/foo.log */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;syslog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test error log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* go to /var/log/messages */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;closelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/5/syslog.conf&quot;&gt;http://linux.die.net/man/5/syslog.conf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/3/openlog&quot;&gt;http://linux.die.net/man/3/openlog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shallowsky.com/blog/linux/rsyslog-conf-tutorial.html&quot;&gt;A Brief Tutorial on rsyslog.conf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 20 Aug 2015 00:00:00 -0700</pubDate>
        <link>http://www.bo-yang.net//notes/unix/linux/2015/08/20/linux-system-log-2/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/unix/linux/2015/08/20/linux-system-log-2/</guid>
      </item>
    
      <item>
        <title>Retrieve Last Log After Crash</title>
        <description>&lt;p&gt;In Linux, there are two kinds of crashes - kernel panic/oom and user space core dump. For kernel panic, the standard config is rebooting the system. Unfortunately, the panic log can only be printed to console and will disappear after reboot if there is no additional device to record the console log - most kernel panic/oom logs won’t be written to system log, and even they do, there is no way to sync them to disk storage during panic.&lt;/p&gt;

&lt;p&gt;As for user-sapce core dump, core files will be generated to &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/pid.core&lt;/code&gt;(core pattern can be changed in &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/sys/kernel/core_pattern&lt;/code&gt;) by default. It is up to the admin to decide if the system or process needs reboot after core dump. Although a script can be used to record more logs for the coredump, sometimes it’s still useful to retain some info in the persistent memory, like the backtrace of the coredumped process.&lt;/p&gt;

&lt;h4 id=&quot;modules-needed&quot;&gt;Modules Needed&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://lxr.free-electrons.com/source/drivers/mtd/devices/phram.c&quot;&gt;&lt;strong&gt;phram&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; is a Memory Technology Device(MTD) driver, which supports accessing non-system memory, i.e. from the PCI address space. This module can act as a special memory file to store important data during reboots.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/ramoops.txt&quot;&gt;&lt;strong&gt;ramoops&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ramoops&lt;/code&gt; is an kernel oops/panic logger that writes its logs to predefined memory area before the system crashes. It works by logging oopses and panics in a circular buffer. As long as the device has power supply during reboot, the content stored in ramoops won’t go away.&lt;/p&gt;

&lt;p&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ramoops&lt;/code&gt; can be compiled to &lt;code class=&quot;highlighter-rouge&quot;&gt;.ko&lt;/code&gt; shared library, which can be configured using Linux menuconfig.&lt;/p&gt;

&lt;h4 id=&quot;loading-modules&quot;&gt;Loading Modules&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; can be dynamically loaded using following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;insmod /lib/modules/phram.ko phram=&amp;lt;name&amp;gt;,&amp;lt;addr&amp;gt;,&amp;lt;len&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is the device(i.e. file) name under &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mtdchar/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; is the reserved starting memory address, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;len&amp;gt;&lt;/code&gt; is the predefined length of the memory area.&lt;/p&gt;

&lt;p&gt;To load &lt;code class=&quot;highlighter-rouge&quot;&gt;ramoops&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;insmod /lib/modules/ramoops.ko mem_address=&amp;lt;addr&amp;gt; mem_size=&amp;lt;len&amp;gt; [record_size=&amp;lt;chunks&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;len&amp;gt;&lt;/code&gt; have the same meaning as above, and &lt;code class=&quot;highlighter-rouge&quot;&gt;record_size&lt;/code&gt; is the chunks of reserved memory area.&lt;/p&gt;

&lt;h4 id=&quot;copy-log-to-phram-memory&quot;&gt;Copy Log To &lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; Memory&lt;/h4&gt;

&lt;p&gt;For kernel panic, the ramoops will automatically copy the panic log into the reserved memory. The panic log begins with leading “====” followed by a timestamp and a new line.&lt;/p&gt;

&lt;p&gt;If you need to store other info, &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; command can be used to copy file to the memory, e.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=/var/log/messages bs=1 count=65536 skip=&amp;lt;fsize - len&amp;gt; of=/dev/mtdchar/phram-oops
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;According to &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; manual, &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; is the the input file stream, &lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt; is the output file, &lt;code class=&quot;highlighter-rouge&quot;&gt;bs&lt;/code&gt; specifies the bytes to be read and write at a time, and &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt; configs the input blocks to be skipped from the input file. Here the size of &lt;em&gt;block&lt;/em&gt; is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;bs&lt;/code&gt;. In the above example, the block size is set to 1 byte, and only the last &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt; bytes will be copied to &lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; memory.&lt;/p&gt;

&lt;p&gt;Unfortunately, reading &amp;amp; writing byte-by-byte usaully is very slow. A faster way is setting &lt;code class=&quot;highlighter-rouge&quot;&gt;bs&lt;/code&gt; to a larger number, like 128, 512, 1024, etc. In this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; need to be calculated correspondingly: say the size of reserved memory is &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt;, input file size is &lt;code class=&quot;highlighter-rouge&quot;&gt;fsize&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bs&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;bsize&lt;/code&gt;, then&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// len: memory size
// fsize: input file size
bs = bsize
if (fsize &amp;lt;= bsize)
    skip =  0;
else
    skip = (fsize - len)/bsize + 1;
count = len/bsize + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;dump-last-log&quot;&gt;Dump Last Log&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; command can also be used for dumping data from reserved phram memory area, e.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=/dev/mtdchar/phram-oops bs=&amp;lt;len&amp;gt; count=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other file operation commands/APIs can also be used for &lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; memory device.&lt;/p&gt;

&lt;h4 id=&quot;reset-phram-memory&quot;&gt;Reset &lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; Memory&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;phram&lt;/code&gt; memory can be cleared by file operation coomands/APIS, e.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=/dev/zero bs=&amp;lt;len&amp;gt; count=1 of=/dev/mtdchar/phram-oops
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gentoo-wiki.info/TIP_Use_memory_on_video_card_as_swap&quot;&gt;Use Memory On Video Card As Swap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/ramoops.txt&quot;&gt;Ramoops oops/panic logger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/1/dd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; manual&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0700</pubDate>
        <link>http://www.bo-yang.net//notes/unix/linux/openwrt/2015/05/27/retrieve-last-log/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/unix/linux/openwrt/2015/05/27/retrieve-last-log/</guid>
      </item>
    
      <item>
        <title>Customizing OpenWRT System Log Timestamp</title>
        <description>&lt;p&gt;As explained in previous post &lt;a href=&quot;http://www.bo-yang.net/2015/01/12/linux-system-log/&quot;&gt;Linux System Log&lt;/a&gt;, threre is no way to directly change the default timestamps printed on Linux console. However, it is still possible to get human readable timestamp without using fancy syslog tools like &lt;a href=&quot;http://www.balabit.com/sites/default/files/documents/syslog-ng-ose-latest-guides/en/syslog-ng-ose-guide-admin/html-single/index.html&quot;&gt;syslog-ng&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A bash script of customizing Linux dmesg timestamp is also given in my post post &lt;a href=&quot;http://www.bo-yang.net/2015/01/12/linux-system-log/&quot;&gt;Linux System Log&lt;/a&gt;. Unfortunately, that script won’t work if bash is not available in your Linux system. For example, the default shell in OpenWRT is Busybox ash, which lacks many powerful features of bash. The most significant shortcoming for ash is the lame arithmetic operations. In addition, many useful options for standard commands are not supported in Busybox ash. Fortunately, we have sed and awk installed in OpenWRT. So the arithmetic operations can be done by awk.&lt;/p&gt;

&lt;p&gt;The basic idea of customizing console syslog timestamp is periodically calling &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg -c&lt;/code&gt;, which clears system circular buffer after dumping the system log. In order to also store the log in syslog file(like /var/log/messages), the dumped message also needs to be redirected(or appending) to the syslog file. The timestamps of &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; can be replaced with a human readable one. And the required addition/subtraction is implemented by awk in a very special way.&lt;/p&gt;

&lt;strike&gt;Instead of `dmesg`, someone may be tempted to use command `tail -f /var/log/messages`. Unfortunately, the `tail` command would automatically stop printing from `/var/log/messages` after a while. It may be caused by the implementation of Busybox `tail` or OpenWRT system log mechanism.&lt;/strike&gt;
&lt;p&gt;Although &lt;code class=&quot;highlighter-rouge&quot;&gt;tail -f /var/log/messages&lt;/code&gt; would automatically stop after some time, the &lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt; option works for ash tail command, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;tail -F /var/log/messages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following is the source code in &lt;code class=&quot;highlighter-rouge&quot;&gt;ash&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/ash

#
# This script is used to tail the latest syslogs to stdout,
# syslog file and specified log file.
#

SYSLOG=/var/log/messages
custom_log=
[ ! -z &quot;$1&quot; ] &amp;amp;&amp;amp; custom_log=$1

base=$(cut -d&quot; &quot; -f1 /proc/uptime);
ut=$(date +%s);
# FIXME: Arithmetic operations are not fully supported in ash, use awk instead.
base=`date | awk &quot;{now=$ut - $base; printf \&quot;%d\&quot;, now}&quot;`

dmesg -c &amp;gt;&amp;gt; $SYSLOG # clear circular syslog buffer
while true
do
    dmesg -c | sed &quot;s/^\[[ ]*\?\([0-9.]*\)\] \(.*\)/\\1 \\2/&quot; |
    while read ts msg; do
        now=`date | awk &quot;{now=$base + $ts; printf \&quot;%d\&quot;, now}&quot;`
        newts=`date +&quot;%m/%d/%Y %H:%M:%S&quot; --date &quot;@$now&quot;` # human readable timestamp
        printf &quot;[%s] %s\n&quot; &quot;$newts&quot; &quot;$msg&quot;;
    done | sed &quot;s/$/$(printf &#39;\r&#39;)/&quot; | tee -a $SYSLOG $custom_log

    sleep 1
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 02 Apr 2015 00:00:00 -0700</pubDate>
        <link>http://www.bo-yang.net//notes/unix/linux/openwrt/2015/04/02/customize-linux-system-log-timestamp/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/unix/linux/openwrt/2015/04/02/customize-linux-system-log-timestamp/</guid>
      </item>
    
      <item>
        <title>Debug Kernel Space Memory Leak</title>
        <description>&lt;h3 id=&quot;detect-memory-leak&quot;&gt;1. Detect Memory Leak&lt;/h3&gt;

&lt;p&gt;Memory leak can be detected by monitoring the free memory periodically. Command &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; can be used to show rough memory usage. A more detailed way to analyze memroy is &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/meminfo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/slabinfo&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/meminfo&lt;/code&gt; contains info about total memory, free memory, total highmem, free highmem, total lowmem, free lowmem and etc. Usually highmem is user-space memory, while lowmem is kernel-space memory. If free highmem(HighFree) or free lowmem(LowFree) is continuously decreasing, in most cases it means user space or kernel space memory leaking.&lt;/p&gt;

&lt;p&gt;Once detected memory leaking, we need to determine which slab(s) is(are) leaking. This can be done by monitoring &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/slabinfo&lt;/code&gt;. If the number of a slab’s active objects(column 2) or total objects(column 3) keep increasing, then this slab is very likely leaking memory.&lt;/p&gt;

&lt;p&gt;Following script can be used to monitor both meminfo and slabinfo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;MAX_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20000000
&lt;span class=&quot;nv&quot;&gt;MON_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/monitor_output_&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;uname -n&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;date &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    cat /proc/meminfo &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;----------------------&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    cat /proc/slabinfo &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;----------------------&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    ps -o pid,comm,stat,time,rss,vsz &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;++++++++++++++++++++++&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;fsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ls -l &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;&#39;{print $5}&#39;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fsize&lt;/span&gt; -gt &lt;span class=&quot;nv&quot;&gt;$MAX_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    	&lt;span class=&quot;c&quot;&gt;# upload file to TFTP server&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat /proc/uptime | cut -d&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; -f1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
        mv &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MON_FILE&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;$suffix&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# upload to cloud&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;sleep 300
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After continuously monitoring for hours, simply grep some keywords(e.g. HighFree, LowFree, kmalloc-192, etc.) could find the trend of memory usage. Following data is extracted from a real memory leak monitoring log:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LowFree:          599392 kB
LowFree:          571072 kB
LowFree:          544484 kB
LowFree:          516832 kB
LowFree:          489232 kB
LowFree:          462280 kB
LowFree:          433680 kB
LowFree:          405244 kB
LowFree:          378572 kB
LowFree:          350136 kB
LowFree:          322648 kB
LowFree:          295824 kB
LowFree:          267532 kB
LowFree:          238272 kB
LowFree:          210856 kB
LowFree:          181148 kB
LowFree:          153652 kB
LowFree:          123148 kB
LowFree:          599392 kB
LowFree:          571072 kB
LowFree:          544484 kB
LowFree:          181148 kB
LowFree:          153652 kB
LowFree:          123148 kB
LowFree:           94548 kB
LowFree:           94548 kB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;debug-memory-leak&quot;&gt;2. Debug Memory Leak&lt;/h3&gt;

&lt;p&gt;After finding out the leaking slab, more info could be detected by tracing that slab. If the kernel was built with option &lt;code class=&quot;highlighter-rouge&quot;&gt;CONFIG_SLUB_DEBUG&lt;/code&gt;, the simplest way is to issue command &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 1 &amp;gt; /sys/kernel/slab/&amp;lt;leaking_slab&amp;gt;/trace&lt;/code&gt;. Then the memory allocation trace for this slab will be printed to the console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[  375.201468] TRACE kmalloc-4096 alloc 0xe6be6000 inuse=8 fp=0x  (null)
[  375.207872] Backtrace:
[  375.210309] [&amp;lt;c0012378&amp;gt;] (dump_backtrace+0x0/0x114) from [&amp;lt;c03a0a5c&amp;gt;] (dump_stack+0x18/0x1c)
[  375.218712]  r6:ef300480 r5:e6be6000 r4:c0d40c00 r3:c07004c4
[  375.224367] [&amp;lt;c03a0a44&amp;gt;] (dump_stack+0x0/0x1c) from [&amp;lt;c03a2738&amp;gt;] (alloc_debug_processing+0xc8/0x164)
[  375.233489] [&amp;lt;c03a2670&amp;gt;] (alloc_debug_processing+0x0/0x164) from [&amp;lt;c03a2d0c&amp;gt;] (__slab_alloc.isra.50.constprop.56+0x538/0x5dc)
[  375.244767]  r7:80080008 r6:00080007 r5:e6be6000 r4:c0d40c00
[  375.250421] [&amp;lt;c03a27d4&amp;gt;] (__slab_alloc.isra.50.constprop.56+0x0/0x5dc) from [&amp;lt;c00e872c&amp;gt;] (__kmalloc_track_caller+0xbc/0x190)
[  375.261605] [&amp;lt;c00e8670&amp;gt;] (__kmalloc_track_caller+0x0/0x190) from [&amp;lt;c031f96c&amp;gt;] (__alloc_skb+0x58/0xf4)
[  375.270790] [&amp;lt;c031f914&amp;gt;] (__alloc_skb+0x0/0xf4) from [&amp;lt;c03200d4&amp;gt;] (dev_alloc_skb+0x40/0x64)
[  375.279131] [&amp;lt;c0320094&amp;gt;] (dev_alloc_skb+0x0/0x64) from [&amp;lt;bf6bb504&amp;gt;] (__adf_nbuf_alloc+0x24/0xa4 [adf])
[  375.288409]  r4:ea5c8600 r3:00000004
[  375.292158] [&amp;lt;bf6bb4e0&amp;gt;] (__adf_nbuf_alloc+0x0/0xa4 [adf]) from [&amp;lt;bf8d5f40&amp;gt;] (htt_rx_ring_fill_n+0x34/0x108 [umac])
[  375.302405]  r7:00000000 r6:000005b1 r5:ea5c8720 r4:ea5c8600
[  375.308372] [&amp;lt;bf8d5f0c&amp;gt;] (htt_rx_ring_fill_n+0x0/0x108 [umac]) from [&amp;lt;bf8d6888&amp;gt;] (htt_rx_msdu_buff_replenish+0x54/0x6c [umac])
[  375.319400]  r8:bf927c04 r7:eaaee9c0 r6:eb5b3c00 r5:ea5c8720 r4:ea5c8600
[  375.326429] [&amp;lt;bf8d6834&amp;gt;] (htt_rx_msdu_buff_replenish+0x0/0x6c [umac]) from [&amp;lt;bf8c6b24&amp;gt;] (ol_rx_indication_handler+0x7bc/0x8cc [umac])
[  375.338081]  r5:ea5c8600 r4:00000000
[  375.341955] [&amp;lt;bf8c6368&amp;gt;] (ol_rx_indication_handler+0x0/0x8cc [umac]) from [&amp;lt;bf8d770c&amp;gt;] (htt_t2h_msg_handler_fast+0xac/0x280 [umac])
[  375.353764] [&amp;lt;bf8d7660&amp;gt;] (htt_t2h_msg_handler_fast+0x0/0x280 [umac]) from [&amp;lt;bf8c02dc&amp;gt;] (CE_per_engine_service_each+0x178/0x4b4 [umac])
[  375.365823] [&amp;lt;bf8c0164&amp;gt;] (CE_per_engine_service_each+0x0/0x4b4 [umac]) from [&amp;lt;bf8c3634&amp;gt;] (ath_tasklet+0x68/0x128 [umac])
[  375.376507] [&amp;lt;bf8c35cc&amp;gt;] (ath_tasklet+0x0/0x128 [umac]) from [&amp;lt;c0064478&amp;gt;] (tasklet_action+0xa0/0x11c)
[  375.385567]  r6:e8b88000 r5:c435ef44 r4:c435ef40
[  375.390159] [&amp;lt;c00643d8&amp;gt;] (tasklet_action+0x0/0x11c) from [&amp;lt;c006495c&amp;gt;] (__do_softirq+0x140/0x34c)
[  375.398937] [&amp;lt;c006481c&amp;gt;] (__do_softirq+0x0/0x34c) from [&amp;lt;c0064d38&amp;gt;] (do_softirq+0x4c/0x58)
[  375.407185] [&amp;lt;c0064cec&amp;gt;] (do_softirq+0x0/0x58) from [&amp;lt;c0064dd0&amp;gt;] (local_bh_enable_ip+0x8c/0xcc)
[  375.415870]  r4:e8b88000 r3:0000004a
[  375.419431] [&amp;lt;c0064d44&amp;gt;] (local_bh_enable_ip+0x0/0xcc) from [&amp;lt;c03aa68c&amp;gt;] (_raw_spin_unlock_bh+0x54/0x58)
[  375.428865]  r5:00000304 r4:e9662c00
[  375.432427] [&amp;lt;c03aa638&amp;gt;] (_raw_spin_unlock_bh+0x0/0x58) from [&amp;lt;c038a47c&amp;gt;] (packet_poll+0xa4/0xe4)
[  375.441299] [&amp;lt;c038a3d8&amp;gt;] (packet_poll+0x0/0xe4) from [&amp;lt;c0316e34&amp;gt;] (sock_poll+0x24/0x28)
[  375.449265]  r7:ea9ffe40 r6:00000000 r5:e8b89c4c r4:e8b89c04
[  375.454920] [&amp;lt;c0316e10&amp;gt;] (sock_poll+0x0/0x28) from [&amp;lt;c00fc914&amp;gt;] (do_sys_poll+0x20c/0x3e8)
[  375.463074] [&amp;lt;c00fc708&amp;gt;] (do_sys_poll+0x0/0x3e8) from [&amp;lt;c00fcbb0&amp;gt;] (sys_poll+0x64/0xd0)
[  375.471071] [&amp;lt;c00fcb4c&amp;gt;] (sys_poll+0x0/0xd0) from [&amp;lt;c000e7c0&amp;gt;] (ret_fast_syscall+0x0/0x30)
[  375.479318]  r6:0007a120 r5:00000000 r4:6b3f60a0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first line could only be “TRACE kmalloc-4096 alloc” or “free”, which logs the entry address of this slab. So if the memory leak is very fast, it is possible to monitor all of the alloc/free slabs before the system out of memory. Then find out addresses that never freed, analyze the call traces, and hopefull we could detect the problematic module or functions.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0700</pubDate>
        <link>http://www.bo-yang.net//notes/unix/linux/2015/03/30/debug-kernel-space-memory-leak/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/unix/linux/2015/03/30/debug-kernel-space-memory-leak/</guid>
      </item>
    
      <item>
        <title>Linux System Log</title>
        <description>&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#printk&quot;&gt;printk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#klogd&quot;&gt;klogd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#syslog&quot;&gt;syslog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dmesg&quot;&gt;dmesg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#syslog-ng&quot;&gt;syslog-ng&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#convert_timestamp&quot;&gt;Convert Timestamp&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;a-nameoverviewoverviewa&quot;&gt;1. &lt;a name=&quot;overview&quot;&gt;Overview&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Linux adopts a ring buffer in kernel with a size of &lt;code class=&quot;highlighter-rouge&quot;&gt;__LOG_BUF_LEN&lt;/code&gt; bytes to store system logs, where &lt;code class=&quot;highlighter-rouge&quot;&gt;__LOG_BUF_LEN&lt;/code&gt; equals (&lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt;&amp;lt; CONFIG_LOG_BUF_SHIFT&lt;/code&gt;) (see &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/printk.c&lt;/code&gt; for details). Using a ring buffer implies that older messages get overwritten once the buffer fills up, but this is only a minor drawback compared to the robustness of this solution (i.e. minimum memory footprint, callable from every context, not many resources wasted if nobody reads the buffer, no filling up of disk space/ram when some kernel process goes wild and spams the buffer, …). Using a reasonably large buffer size should give you enough time to read your important messages before they are overwritten.&lt;/p&gt;

&lt;p&gt;The kernel log buffer is accessible for reading from userspace by &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/kmsg&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/kmsg&lt;/code&gt; behaves more or less like a FIFO and blocks until new messages appear. Please note, reading from &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/kmsg&lt;/code&gt; consumes the messages in the ring buffer so they may not be available for other programs. It is usually a good idea to let &lt;code class=&quot;highlighter-rouge&quot;&gt;klogd&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog&lt;/code&gt; do this job and read the content of the buffer via dmesg.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.bo-yang.net//assets/images/2015-01-12-linux-system-log/linux_kernel_log.png&quot; alt=&quot;Linux Kernel Log&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-nameprintkprintka&quot;&gt;2. &lt;a name=&quot;printk&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printk&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printk&lt;/code&gt; is the kernel function to classify messages according to their severity by loglevels and write them to the circular system message buffer. The function then wakes any process that is waiting for messages, that is, any process that is sleeping in the &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog&lt;/code&gt; system call or that is reading &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/kmsg&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;printk&lt;/code&gt; can be invoked from anywhere, even from an interrupt handler, with no limit on how much data can be printed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;printk( KERN_CRIT &quot;Error code %08x.\n&quot;, val );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are eight possible loglevel strings, defined in the header &amp;lt;linux/kernel.h&amp;gt;; we list them in order of decreasing severity:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;String&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
      &lt;th&gt;alias function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_EMERG&lt;/td&gt;
      &lt;td&gt;“0”&lt;/td&gt;
      &lt;td&gt;Emergency messages, system is about to crash or is unstable&lt;/td&gt;
      &lt;td&gt;pr_emerg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_ALERT&lt;/td&gt;
      &lt;td&gt;“1”&lt;/td&gt;
      &lt;td&gt;Something bad happened and action must be taken immediately&lt;/td&gt;
      &lt;td&gt;pr_alert&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_CRIT&lt;/td&gt;
      &lt;td&gt;“2”&lt;/td&gt;
      &lt;td&gt;A critical condition occurred like a serious hardware/software failure&lt;/td&gt;
      &lt;td&gt;pr_crit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_ERR&lt;/td&gt;
      &lt;td&gt;“3”&lt;/td&gt;
      &lt;td&gt;An error condition, often used by drivers to indicate difficulties with the hardware&lt;/td&gt;
      &lt;td&gt;pr_err&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_WARNING&lt;/td&gt;
      &lt;td&gt;“4”&lt;/td&gt;
      &lt;td&gt;A warning, meaning nothing serious by itself but might indicate problems&lt;/td&gt;
      &lt;td&gt;pr_warning&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_NOTICE&lt;/td&gt;
      &lt;td&gt;“5”&lt;/td&gt;
      &lt;td&gt;Nothing serious, but notably nevertheless. Often used to report security events.&lt;/td&gt;
      &lt;td&gt;pr_notice&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_INFO&lt;/td&gt;
      &lt;td&gt;“6”&lt;/td&gt;
      &lt;td&gt;Informational message e.g. startup information at driver initialization&lt;/td&gt;
      &lt;td&gt;pr_info&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_DEBUG&lt;/td&gt;
      &lt;td&gt;“7”&lt;/td&gt;
      &lt;td&gt;Debug messages&lt;/td&gt;
      &lt;td&gt;pr_debug, pr_devel if DEBUG is defined&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_DEFAULT&lt;/td&gt;
      &lt;td&gt;“d”&lt;/td&gt;
      &lt;td&gt;The default kernel loglevel&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;KERN_CONT&lt;/td&gt;
      &lt;td&gt;””&lt;/td&gt;
      &lt;td&gt;“continued” line of log printout (only done after a line that had no enclosing &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;pr_cont&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each string (in the macro expansion) represents an integer in angle brackets. Integers range from 0 to 7, with smaller values representing higher priorities.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;printk&lt;/code&gt; statement with no specified priority defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFAULT_MESSAGE_LOGLEVEL&lt;/code&gt;, specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/printk.c&lt;/code&gt; as an integer. For this the kernel compares the log level of the message to the &lt;code class=&quot;highlighter-rouge&quot;&gt;console_loglevel&lt;/code&gt; (a kernel variable) and if the priority is higher (i.e. a lower value) than the console_loglevel the message will be printed to the current console. The &lt;code class=&quot;highlighter-rouge&quot;&gt;console_loglevel&lt;/code&gt; can be checked by&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cat /proc/sys/kernel/printk
7       4       1       7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first integer shows you your current &lt;code class=&quot;highlighter-rouge&quot;&gt;console_loglevel&lt;/code&gt;; the second is the &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFAULT_MESSAGE_LOGLEVEL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Kernel log timestamp is added by &lt;code class=&quot;highlighter-rouge&quot;&gt;vprintk()&lt;/code&gt;, in &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/printk.c&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#if defined(CONFIG_PRINTK_TIME)
static bool printk_time = 1;
#else
static bool printk_time = 0;
#endif

if (printk_time) {
		/* Add the current time stamp */
		char tbuf[50], *tp;
		unsigned tlen;
		unsigned long long t;
		unsigned long nanosec_rem;

		t = cpu_clock(printk_cpu);
		nanosec_rem = do_div(t, 1000000000);
		tlen = sprintf(tbuf, &quot;[%5lu.%06lu] &quot;,
				(unsigned long) t,
				nanosec_rem / 1000);

		for (tp = tbuf; tp &amp;lt; tbuf + tlen; tp++)
			emit_log_char(*tp);
		printed_len += tlen;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-nameklogdklogda&quot;&gt;3. &lt;a name=&quot;klogd&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;klogd&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;klogd&lt;/code&gt; process is running, it retrieves kernel messages and dispatches them to &lt;code class=&quot;highlighter-rouge&quot;&gt;syslogd&lt;/code&gt;, which in turn checks &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/syslog.conf&lt;/code&gt; to find out how to deal with them.&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;syslogd&lt;/code&gt; differentiates between messages according to a facility and a priority; allowable values for both the facility and the priority are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sys/syslog.h&amp;gt;&lt;/code&gt;. Kernel messages are logged by the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_KERN&lt;/code&gt; facility at a priority corresponding to the one used in &lt;code class=&quot;highlighter-rouge&quot;&gt;printk&lt;/code&gt; (for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;LOG_ERR&lt;/code&gt; is used for &lt;code class=&quot;highlighter-rouge&quot;&gt;KERN_ERR&lt;/code&gt; messages). &lt;strong&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;klogd&lt;/code&gt; isn’t running, data remains in the circular buffer until someone reads it or the buffer overflows.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to avoid clobbering your system log with the monitoring messages from your driver, you can either specify the (file) option to &lt;code class=&quot;highlighter-rouge&quot;&gt;klogd&lt;/code&gt; to instruct it to save messages to a specific file, or customize &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/syslog.conf&lt;/code&gt; to suit your needs. Yet another possibility is to take the brute-force approach: kill &lt;code class=&quot;highlighter-rouge&quot;&gt;klogd&lt;/code&gt; and verbosely print messages on an unused virtual terminal, or issue the command &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /proc/kmsg&lt;/code&gt; from an unused xterm.&lt;/p&gt;

&lt;h3 id=&quot;a-namesyslogsysloga&quot;&gt;4. &lt;a name=&quot;syslog&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syslog&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Accessing to the log buffer is provided at the core through the multi-purpose &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog&lt;/code&gt; system call. The prototype for the &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog system&lt;/code&gt; call is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;./linux/include/linux/syslog.h&lt;/code&gt;; its implementation is in &lt;code class=&quot;highlighter-rouge&quot;&gt;./linux/kernel/printk.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog&lt;/code&gt; call serves as the input/output (I/O) and control interface to the kernel’s log message ring buffer. From the syslog call, an application can read log messages (partial, in their entirety, or only new messages) as well as control the behavior of the ring buffer (clear contents, set the level of messages to be logged, enable or disable console, and so on).&lt;/p&gt;

&lt;p&gt;Although reading from &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/kmsg&lt;/code&gt; consumes the data from the log buffer, the &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog&lt;/code&gt; system call can optionally return log data while leaving it for other processes as well.&lt;/p&gt;

&lt;p&gt;Kernel space syslog API:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;syslog.h&amp;gt;

void openlog(const char *ident, int option, int facility);
void syslog(int priority, const char *format, ...);
void closelog(void);

#include &amp;lt;stdarg.h&amp;gt;

void vsyslog(int priority, const char *format, va_list ap);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;closelog()&lt;/code&gt; closes the descriptor being used to write to the system logger.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openlog()&lt;/code&gt; opens a connection to the system logger for a program.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syslog()&lt;/code&gt; generates a log message, which will be distributed by &lt;code class=&quot;highlighter-rouge&quot;&gt;syslogd&lt;/code&gt;. It does this by writing to the Unix domain socket &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/log&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vsyslog()&lt;/code&gt; is functionally identical to &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog()&lt;/code&gt;, with the BSD style variable length argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User space syslog API(glibc wrapper):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int syslog( int type, char *bufp, int len );
int klogctl( int type, char *bufp, int len );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;klogctl()&lt;/code&gt; is the glibc wrapper to control the kernel &lt;code class=&quot;highlighter-rouge&quot;&gt;printk()&lt;/code&gt; buffer.&lt;/p&gt;

&lt;h3 id=&quot;a-namedmesgdmesga&quot;&gt;5. &lt;a name=&quot;dmesg&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; command is used to print and control the kernel ring buffer. This command uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;klogctl&lt;/code&gt; system call to read the kernel ring buffer and emit it to standard output (stdout). The command can also be used to clear the kernel ring buffer (using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; option), set the level for logging to the console (the &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; option), and define the size of the buffer used to read the kernel log messages (the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; option).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; reads by default a buffer of max 16392 bytes, so if you use a larger log buffer you have to invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;dmesg&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; parameter e.g.:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### CONFIG_LOG_BUF_SHIFT 17 = 128k
$ dmesg -s 128000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-namesyslog-ngsyslog-nga&quot;&gt;6. &lt;a name=&quot;syslog-ng&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syslog-ng&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;syslog-ng&lt;/code&gt; application is a flexible and highly scalable system logging application that is ideal for creating centralized and trusted logging solutions. It extends the original syslogd model with content-based filtering, rich filtering capabilities, flexible configuration options and adds important features to syslog.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syslog-ng&lt;/code&gt; also supports ISO/RFC timestamp for system logs. For more info about this powerful log system, please refer to &lt;a href=&quot;http://www.balabit.com/sites/default/files/documents/syslog-ng-ose-latest-guides/en/syslog-ng-ose-guide-admin/html-single/index.html&quot;&gt;the manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-nameconverttimestampconverting-timestampsa&quot;&gt;7. &lt;a name=&quot;convert_timestamp&quot;&gt;Converting Timestamps&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;By default the time stamps are printed in “seconds since boot” (this is the way the kernel is programmed to print the time stamps in &lt;code class=&quot;highlighter-rouge&quot;&gt;vprintk()&lt;/code&gt;, and it can not be changed to print the time stamps in a human readable format). The system uptime can be helpful to calculate an absolute time stamp if needed (run the &lt;code class=&quot;highlighter-rouge&quot;&gt;uptime&lt;/code&gt; command).&lt;/p&gt;

&lt;p&gt;Given timestamp:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[196149.728085] hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The algorithm below converts the printed time stamps to a human readable format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Take the log&#39;s time stamp in seconds: 

196149.728085 seconds (round the number down/up if needed) 


2. Divide the time stamp in seconds by 60 to get the total amount of minutes: 

196150 : 60 = 3269.1667 minutes (round the number down/up if needed) 


3. Divide the time stamp in minutes by 60 to get the total amount of hours: 

3269.1667 : 60 = 54.486111666666666666666666666667 hours 


4. Break the decimal number into 2 parts: 

54.486111666666666666666666666667 hours = (54 hours) + (0.486111666666666666666666666667 decimal hours) 


5. Use the time conversion charts below to convert decimal hours to minutes: 

0.486111666666666666666666666667 decimal hours ~ 0.48 decimal hours ~ 29 minutes 

6. Note: For more precise conversion (down to seconds), you can use various time converters available on the Internet. Just search for &#39;convert decimal time&#39; in any search engine. 


7. Hence, we get that the log was created this amount of time since boot: 

196149.728085 seconds ~ 54 hours 29 minutes 

8. Check the current system&#39;s uptime: 

[Expert@HostName]# uptime 

9. To get the log&#39;s real time stamp, subtract the log&#39;s time stamp in dmesg kernel ring buffer from the current system&#39;s uptime.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Following is a Shell script to transform uptime timestamp to human-readable timestamp:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Translate dmesg timestamps to human readable format&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# desired date format&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;date_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%a %b %d %T %Y&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# uptime in seconds&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;uptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cut -d &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; -f 1 /proc/uptime&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# run only if timestamps are enabled&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Y&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat /sys/module/printk/parameters/time&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;dmesg | sed &lt;span class=&quot;s2&quot;&gt;&quot;s/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[ ]*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\?\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9.]*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)\]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2/&quot;&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;timestamp message; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#date +&quot;%s&quot; -d &quot;1970-01-01 00:00:00&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#awk &#39;{printf(&quot;%d:%02d:%02d\n&quot;, ($1/3600), ($1%3600/60),($1%60))}&#39; /proc/uptime&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[%s] %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date --date &lt;span class=&quot;s2&quot;&gt;&quot;now - &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uptime&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; seconds + &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$timestamp&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; seconds&quot;&lt;/span&gt; +&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date_format&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done
else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Timestamps are disabled (/sys/module/printk/parameters/time)&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://elinux.org/Debugging_by_printing&quot;&gt;http://elinux.org/Debugging_by_printing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Linux Device Drivers, Corbet, Rubini and Kroah-Hartmann, 3rd Edition, Chapter 4 Section 2&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/l-kernel-logging-apis/index.html&quot;&gt;Kernel logging: APIs and implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?dmesg+8&quot;&gt;http://unixhelp.ed.ac.uk/CGI/man-cgi?dmesg+8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&amp;amp;solutionid=sk92677&quot;&gt;https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&amp;amp;solutionid=sk92677&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.balabit.com/sites/default/files/documents/syslog-ng-ose-latest-guides/en/syslog-ng-ose-guide-admin/html-single/index.html&quot;&gt;http://www.balabit.com/sites/default/files/documents/syslog-ng-ose-latest-guides/en/syslog-ng-ose-guide-admin/html-single/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 12 Jan 2015 00:00:00 -0800</pubDate>
        <link>http://www.bo-yang.net//notes/unix/linux/2015/01/12/linux-system-log/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/unix/linux/2015/01/12/linux-system-log/</guid>
      </item>
    
      <item>
        <title>Click Notes II - Click Script Language</title>
        <description>&lt;p&gt;The &lt;a href=&quot;http://www.read.cs.ucla.edu/click/docs/language&quot;&gt;Click programming language&lt;/a&gt; was developed to configure Click routers, but nowadays you also can use it to write test cases for Click elements.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#syntax&quot;&gt;Basic Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#element_group&quot;&gt;Element Group&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comp_element&quot;&gt;Compound Element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#script&quot;&gt;Script&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testie&quot;&gt;Testie&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;a-namesyntaxbasic-syntaxa&quot;&gt;&lt;a name=&quot;syntax&quot;&gt;Basic Syntax&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The Click Script Language defines a configuration graph, which consists of connected elements. Each element has an element class specified by class name. Elements are connected through their input and output ports. Input and output ports are distinguished by number, while elements are distinguished by name.&lt;/p&gt;

&lt;p&gt;Click configuration strings are comma-separated lists of arguments delimited by parentheses. The fundamental syntax of Click Script Language is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name :: class(config-string);    // declare element object
name1, name2, ..., nameN :: class(config); // declaration shorhand
name1[port1] -&amp;gt; [port2]name2;    // connect two elements
name1[port1] -&amp;gt; [port2a]name2[port2b] -&amp;gt; [port3]name3;    // piggyback connections
name1 -&amp;gt; name2 :: class(config-string) -&amp;gt; name3;  // declaring elements inside connections is allowed
name1 -&amp;gt; class(config-string) -&amp;gt; name3;  // anonymous element
require(requirement[, requirement …]);   // list config requirements

n1, n2 :: class -&amp;gt; n3;  // many-to-one connections

// many-to-many connections:
// A many-to-many connection matches output ports to input ports. 
// There must be as many ports on the left as on the right.
// &#39;=&amp;gt;&#39; is the many-to-many connector.
c[0], c[1], c[2] =&amp;gt; Paint(0), Paint(1), Paint(2) -&amp;gt; next;
c =&amp;gt; Paint(0), Paint(1), Paint(2) -&amp;gt; next;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-nameelementgroupelement-groupa&quot;&gt;&lt;a name=&quot;element_group&quot;&gt;Element Group&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An element group is one or more Click statements enclosed in parentheses. Within the parentheses, the special pseudoelements &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; refer to connections from outside the group. Click expands the group at parse time, so connections through &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; have no run-time overhead. The following five lines are equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x -&amp;gt; y;
x -&amp;gt; ( input -&amp;gt; output ) -&amp;gt; y;
x -&amp;gt; ( [0] -&amp;gt; [0] ) -&amp;gt; y;
x -&amp;gt; (-&amp;gt;) -&amp;gt; y;
x -&amp;gt; ( [0]-&amp;gt;[0]; [1]-&amp;gt;[1] ) =&amp;gt; ( [0]-&amp;gt;[0]; [1]-&amp;gt;[1] ) -&amp;gt; y;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Line five uses the fact that connections may be repeated without error (the line expands to &lt;code class=&quot;highlighter-rouge&quot;&gt;x -&amp;gt; y; x -&amp;gt; y&lt;/code&gt;), where the explicit semicolons are used to avoid ambiguity.&lt;/p&gt;

&lt;p&gt;Element groups have implicit, overridable port specifications that list all their ports in sequential order. For example, these three lines are equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x =&amp;gt; ( [0]-&amp;gt;[0]; [1]-&amp;gt;[1] ) -&amp;gt; y;
x =&amp;gt; [0,1] ( [0]-&amp;gt;[0]; [1]-&amp;gt;[1] ) [0,1] -&amp;gt; y;
x -&amp;gt; y; x [1] -&amp;gt; y;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An element group does &lt;strong&gt;not&lt;/strong&gt; define a new scope. Its contents may refer to elements declared outside of the group, and declarations inside the group are visible after the group closes. This differs from compound elements, described next, which have a related syntax but additionally introduce a new scope.&lt;/p&gt;

&lt;h3 id=&quot;a-namecompelementcompound-elementa&quot;&gt;&lt;a name=&quot;comp_element&quot;&gt;Compound Element&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;compound element&lt;/strong&gt; is a scoped collection of elements that behaves like a single element. A compound element can be used anywhere an element class is expected (that is, in a declaration or connection). Syntactically, a compound element is a set of Click statements enclosed in braces &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Inside the braces, the special names &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; represent connections from or to the outside.&lt;/p&gt;

&lt;p&gt;Compound element classes are router configuration fragments consisted by Click elements and statements that are treated like element classes. For compound elements, only components remain in the final configuration graph, and all compound element structure is compiled away. This process is called &lt;strong&gt;flattening&lt;/strong&gt;, during which compound element components are given names that reflect their origin. For example, a component named &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; of a compound element &lt;code class=&quot;highlighter-rouge&quot;&gt;compound&lt;/code&gt; is named &lt;code class=&quot;highlighter-rouge&quot;&gt;compound/e&lt;/code&gt; in the flattened configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elementclass Name {    // compound elements
    ... Click Statements …  // defined by click statements but not C++ class
}
e :: {    // anonymous compound element class
    ... Click Statements … 
}
elementclass MyQueue Queue;   // define an alias for an existing element class
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Like any element, compound elements may have input and output ports. Each connection to or from a compound element port is transformed by flattening into a connection to or from one of its components’ ports. Inside a compound element class, the special pseudoelements &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; specify how this transformation proceeds. Given a compound element e. If &lt;code class=&quot;highlighter-rouge&quot;&gt;e/input&lt;/code&gt; connects to component &lt;code class=&quot;highlighter-rouge&quot;&gt;e/c&lt;/code&gt; through port &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, then every connection to &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;’s input port &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; will flatten into a connection to its component &lt;code class=&quot;highlighter-rouge&quot;&gt;e/c&lt;/code&gt;.  For example,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elementclass Example {
    s1 :: InfiniteSource; s2 :: RatedSource;
    s1 -&amp;gt; [0]output; s2 -&amp;gt; [0]output;
}
e :: Example -&amp;gt; d :: Discard;

above code will be flattened to

e/s1 :: InfiniteSource; e/s2 :: RatedSource; d :: Discard;
e/s1 -&amp;gt; d; e/s2 -&amp;gt; d;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compound element classes also can take varying number configuration arguments, input ports, and output ports. &lt;strong&gt;Formal parameters&lt;/strong&gt; define the arguments that a compound element class should take. A &lt;strong&gt;formal parameter&lt;/strong&gt; is a sequence of alphanumeric characters preceded by a dollar sign, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;$var&lt;/code&gt;. A compound element class may begin with a list of parameters.&lt;/p&gt;

&lt;p&gt;While formal parameters let a compound element class support a fixed number of positional arguments, &lt;strong&gt;overloading&lt;/strong&gt; lets several compound element definitions with different numbers of arguments or ports share a single name. As a side-effect, overloading also support different behaviors in a compound element based on numbers of input/output ports. Every compound element class can correspond to a number of definitions, which are textually separated by &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;, which are distinguished by the numbers of formal parameters, input ports or output ports. Given a declaration of compound element, the interpreter checks the number of arguments and search for a matching definition. If found one, then it is expanded; otherwise, an error will occur.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Example 1: argument overloading
elementclass ShapedQueue {				
    input -&amp;gt; Queue -&amp;gt; Shaper(10000) -&amp;gt; output;
    ||
    $cap | input -&amp;gt; Queue($cap) -&amp;gt; Shaper(10000) -&amp;gt; output; 
}				
q1 :: ShapedQueue;    // OK; uses first definition
q2 :: ShapedQueue(1024);    // OK; uses second definition
q3 :: ShapedQueue(1024, 10000);   // error—no matching definition 

// Example 1: port overloading - additional output port				
elementclass VerboseCheckIPHeader {
    input -&amp;gt; c :: CheckIPHeader -&amp;gt; output; c[1] -&amp;gt; Print(CheckIPHeader) -&amp;gt; Discard; 
    ||
    input -&amp;gt; c :: CheckIPHeader -&amp;gt; output; c[1] -&amp;gt; Print(CheckIPHeader) -&amp;gt; [1]output;	
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Overloading also allows user to add new definitions to an existing element class. For example, following definition will add a two-argument version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elementclass Queue {
  ... ||  // &#39;dot dot dot&#39; is part of the syntax 
$capacity, $rate | input -&amp;gt; Queue($capacity)
                         -&amp;gt; Shaper($rate) -&amp;gt; output;
}
q1 :: Queue;        // built-in Queue
q2 :: Queue(1024);  // built-in Queue
q3 :: Queue(1024, 10000); // overloaded Queue definition above
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When choosing the definition that corresponds to a given compound element declaration, Click only considers the definitions that were lexically visible at the point of declaration.&lt;/p&gt;

&lt;p&gt;Compound element configuration arguments are only meaningful inside the configuration strings of components. So that you cannot change the element class of a given component, or cause components to be added to or subtracted from the compound. However, it  is possible to build a compound element that sends packets through different sets of components based on the value of its configuration string. Following example uses StaticSwitch to implement a selective checksum check.(The &lt;code class=&quot;highlighter-rouge&quot;&gt;CheckIPHeader&lt;/code&gt; element checks an IP header’s length and checksum for sanity; &lt;code class=&quot;highlighter-rouge&quot;&gt;CheckIPHeader2&lt;/code&gt; does the work of &lt;code class=&quot;highlighter-rouge&quot;&gt;CheckIPHeader&lt;/code&gt; except for the checksum check.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elementclass MaybeChecksum { $checksum_p |
    input -&amp;gt; sw :: StaticSwitch($checksum_p);
    sw[0] -&amp;gt; CheckIPHeader2 -&amp;gt; output;
    sw[1] -&amp;gt; CheckIPHeader -&amp;gt; output;
};
c1 :: MaybeChecksum(0);    // uses CheckIPHeader2, skips checksum
c2 :: MaybeChecksum(1);    // uses CheckIPHeader, checks checksum
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-namescriptscripta&quot;&gt;&lt;a name=&quot;script&quot;&gt;Script&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.read.cs.ucla.edu/click/elements/script&quot;&gt;Script element&lt;/a&gt; implements a simple scripting language interpreter useful for controlling Click configurations. Scripts can set variables, call handlers, wait for prodding from other elements, and stop the router. Script element is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;click/elements/standard/Script.hh&lt;/code&gt;.  For details of instructions and handlers, please refer to &lt;a href=&quot;http://www.read.cs.ucla.edu/click/elements/script&quot;&gt;http://www.read.cs.ucla.edu/click/elements/script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the Script element, each keyword is handled by a corresponding handler:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void
Script::add_handlers()
{
    set_handler(&quot;step&quot;, Handler::OP_WRITE | Handler::h_nonconst, step_handler, 0, ST_STEP);
    set_handler(&quot;goto&quot;, Handler::OP_WRITE | Handler::h_nonconst, step_handler, 0, ST_GOTO);
    set_handler(&quot;run&quot;, Handler::OP_READ | Handler::READ_PARAM | Handler::OP_WRITE | Handler::h_nonconst, step_handler, 0, ST_RUN);
    set_handler(&quot;add&quot;, Handler::OP_READ | Handler::READ_PARAM, arithmetic_handler, ar_add, 0);
    set_handler(&quot;sub&quot;, Handler::OP_READ | Handler::READ_PARAM, arithmetic_handler, ar_sub, 0);
    set_handler(&quot;min&quot;, Handler::OP_READ | Handler::READ_PARAM, arithmetic_handler, ar_min, 0);
    set_handler(&quot;max&quot;, Handler::OP_READ | Handler::READ_PARAM, arithmetic_handler, ar_max, 0);
        set_handler(&quot;length&quot;, Handler::OP_READ | Handler::READ_PARAM, basic_handler, ar_length, 0);
    set_handler(&quot;unquote&quot;, Handler::OP_READ | Handler::READ_PARAM, basic_handler, ar_unquote, 0);
…….
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;All of the handlers defined in the Script element need to parse the script language, which is implemented in click/lib/confparse.[hh&lt;/td&gt;
      &lt;td&gt;cc]. In this way, the Script element could serve as an interpreter to the script instructions and handlers.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;a-nametestietestiea&quot;&gt;&lt;a name=&quot;testie&quot;&gt;Testie&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.read.cs.ucla.edu/click/docs/testie&quot;&gt;Testie&lt;/a&gt; is a simple test tool for Click elements, which enables the Test-Driven-Development of Click. Each testie file is written mainly in Click script language and incorporates a shell script to be run. Tool &lt;code class=&quot;highlighter-rouge&quot;&gt;click/test/testie&lt;/code&gt; runs the Click script, and checks the expected error or output. A testie file may have following layout:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%info 
// a short description of the test.

%require [-q]
// prerequisites that must be satisfied before the test can run.

%include FILENAME
// interpolate the contents of another testie file.

%script
// Shell scripts that controls the test. Testie will run each command in sequence.
// Command “click” need to be specified to interpret Click scripts.

%file [-d] [+LENGTH] FILENAME...
// Create an input file for the script. FILENAME can be `stdin`, which sets the script&#39;s standard input.

%expectv [-ad] [+LENGTH] FILENAME...
%expect [-adiw] [+LENGTH] FILENAME…
%expectx [-adiw] [+LENGTH] FILENAME...
// An expected output file for the script. FILENAME can be &#39;stdout&#39; or &#39;stderr&#39;. 
// Testie will run the script, then compare the file generated by script with the provided data. The files are compared line-by-line. 
// The -a flag marks this expected output as an alternate. Testie will compare the script&#39;s output file with each provided alternate; the test succeeds if any of the alternates match. 
// The -d flag behaves as in %file. 
// The -i flag makes any regular expressions case-insensitive (text outside of regular expressions must match case), and the -w flag ignores any differences in amount of whitespace within a line.

%ignorex [-di] [+LENGTH] [FILENAME]
%ignore, %ignorev
// lines to be ignored.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition to above sections, you also can define one or multiple Script elements in the testie file, which group a set of Click Script instructions.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;click/test/testie&lt;/code&gt; is the Perl tool to run testie files. Given a testie file, the testie interpreter will first read and parse each section defined in the testie file: &lt;code class=&quot;highlighter-rouge&quot;&gt;%require&lt;/code&gt; files will be expanded, files defined in section &lt;code class=&quot;highlighter-rouge&quot;&gt;%file&lt;/code&gt; will be created in a temporary directory, commands listed under &lt;code class=&quot;highlighter-rouge&quot;&gt;%script&lt;/code&gt; will be recorded in a hash, and so on. After preprocessing, the commands will be executed by shell or interpreted by click. &lt;code class=&quot;highlighter-rouge&quot;&gt;click/test/testie&lt;/code&gt; is a very good template of simple interpreter.&lt;/p&gt;

&lt;h3 id=&quot;a-namereferreferencesa&quot;&gt;&lt;a name=&quot;refer&quot;&gt;References&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.read.cs.ucla.edu/click/docs/language&quot;&gt;http://www.read.cs.ucla.edu/click/docs/language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/papers/click:kohler-phd/thesis.pdf&quot;&gt;Eddie Kohler, &lt;em&gt;The Click modular router&lt;/em&gt;, Ph.D. thesis, MIT, November 2000. This has more detail and examples than the TOCS and SOSP papers of the same name.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.read.cs.ucla.edu/click/elements/script&quot;&gt;http://www.read.cs.ucla.edu/click/elements/script&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.read.cs.ucla.edu/click/docs/testie&quot;&gt;http://www.read.cs.ucla.edu/click/docs/testie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 07 Jan 2015 00:00:00 -0800</pubDate>
        <link>http://www.bo-yang.net//notes/network/2015/01/07/click-notes-click-language/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/network/2015/01/07/click-notes-click-language/</guid>
      </item>
    
      <item>
        <title>Click Notes I - Overview</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.read.cs.ucla.edu/click/click&quot;&gt;Click&lt;/a&gt; is a modular router toolkit written mainly in C++, which can be run in both user space and OS kernel space. Since its invention in late 1990s by Eddie Kohler, Click is has gained great successes in both research and industry. This series of notes aims to (1)introduce Click platform, (2)analyze the implementation of Click, and (3) discuss some general problems related to Operating System and Network Programming. The Click Source code can be found &lt;a href=&quot;https://github.com/kohler/click/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#router_model&quot;&gt;Router Models&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#click_arch&quot;&gt;Click Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#element&quot;&gt;Elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#packet&quot;&gt;Packets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#connect&quot;&gt;Connections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ref&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;a-nameroutermodelrouter-modelsa&quot;&gt;&lt;a name=&quot;router_model&quot;&gt;Router Models&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Click was developed based on an abstract router model. Routers are viewed as pure packet processors: packets arrive on one network interface, travel through the packet processor’s forwarding path, and are emitted on another network interface. In routers, packets flow through the forwarding paths, which behave just like the pipelines. Packets will lose their identity after they arrive the target - only data will be transferred to applications(running on host). One significant differences between routers and hosts is: in packet processors, packets move horizontally between peers, not vertically between application layers.&lt;/p&gt;

&lt;p&gt;Click also used an important observation - the packet operation is be basis of computer networks. Firewall limits access to a protected network, often by dropping inappropriate packets. Network address translators allow a large set of machines to share a single public IP address; they work by rewriting packet headers, and occasionally some data. Load balancers send packets to one of a set of servers, dynamically choosing a server based on load or some application characteristic. Therefore, most Click elements center on packet operations.&lt;/p&gt;

&lt;h3 id=&quot;a-nameclickarchclick-architecturea&quot;&gt;&lt;a name=&quot;click_arch&quot;&gt;Click Architecture&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The Click architecture is centered on the element. Each element is a software component representing a unit of router processing, which generally examines or modifies packets in some way. At run time, elements pass packets to one another over links called connections. Each connection represents a possible path for packet transfer. A router configuration is a directed graph with elements at the vertices and connections as the edges. Router configurations, run in the context of some driver, either at user level or in the Linux kernel.&lt;/p&gt;

&lt;p&gt;A Click router is assembled from packet processing modules called elements. Individual elements implement simple router functions like packet classification, queueing, scheduling, and interfacing with network devices. Configurations are written in a declarative language that supports user-defined abstractions. Due to Click’s architecture and language, Click router configurations are modular and easy to extend. To build a router configuration, Click users can choose a collection of elements and connects them into a directed graph.&lt;/p&gt;

&lt;p&gt;In addition to the modular router, Click also supports a configuration scripting language and provides an interpreter, which are also written in C++. Click supports multiple processros and has a builtin scheduler for tasks(elements). These topics will be covered in the future posts.&lt;/p&gt;

&lt;h3 id=&quot;a-nameelementelementsa&quot;&gt;&lt;a name=&quot;element&quot;&gt;Elements&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Elements have five important properties: element class, ports, configuration strings, method interfaces and handlers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.bo-yang.net//assets/images/click_notes/click_element.png&quot; alt=&quot;Click Connections&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Element class&lt;/em&gt;. An element’s class specifies that element’s data layout and behavior.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ports&lt;/em&gt;. Each element can have any number of input and output ports. Every connection links an output port on one element to an input port on another. Ports may be push, pull, or agnostic.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Configuration string&lt;/em&gt;. optional, contains additional arguments passed to the element at router initialization time. Lexically, a configuration string is a list of arguments separated by commas, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;c1 :: Classifier(9/17, 9/6, -);&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Method interfaces&lt;/em&gt;. Each element exports methods that other elements may access. This set of methods is grouped into method interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Handlers&lt;/em&gt;. Handlers are methods that are exported to the user, rather than to other elements in the router configuration. They support text-based read/write semantics, as opposed to fully general method call semantics. In the Linux kernel driver, handlers appear as files in the dynamic &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt; file system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of real Click element is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#ifndef CLICK_SWITCH_HH
#define CLICK_SWITCH_HH
#include &amp;lt;click/element.hh&amp;gt;
CLICK_DECLS

class Switch : public Element { public:

  Switch() CLICK_COLD;

  const char *class_name() const		{ return &quot;Switch&quot;; }
  const char *port_count() const		{ return &quot;1/-&quot;; }
  const char *processing() const		{ return PUSH; }
  void add_handlers() CLICK_COLD;

  int configure(Vector&amp;lt;String&amp;gt; &amp;amp;, ErrorHandler *) CLICK_COLD;
  bool can_live_reconfigure() const		{ return true; }

  void push(int, Packet *);

  int llrpc(unsigned, void *);

 private:

  int _output;

  static String read_param(Element *, void *) CLICK_COLD;
  static int write_param(const String &amp;amp;, Element *, void *, ErrorHandler *) CLICK_COLD;

};

CLICK_ENDDECLS
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In above code, the Click macros are defined as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Define macros that surround Click declarations. */
#define CLICK_DECLS		namespace Click {
#define CLICK_ENDDECLS		}

/* Define macro for cold (rarely used) functions. */
#if __GNUC__ &amp;lt; 4 || (__GNUC__ == 4 &amp;amp;&amp;amp; __GNUC_MINOR__ &amp;lt; 3)
# define CLICK_COLD /* nothing */
#else
# define CLICK_COLD __attribute__((cold))
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where the GNU &lt;code class=&quot;highlighter-rouge&quot;&gt;cold&lt;/code&gt; attribute on functions is used to inform the compiler that the function is unlikely to be executed. The function is optimized for size rather than speed and on many targets it is placed into a special subsection of the text section so all cold functions appear close together, improving code locality of non-cold parts of program.&lt;/p&gt;

&lt;p&gt;And the handlers of this element can be defined as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String
Switch::read_param(Element *e, void *)
{
  Switch *sw = (Switch *)e;
  return String(sw-&amp;gt;_output);
}

int
Switch::write_param(const String &amp;amp;s, Element *e, void *, ErrorHandler *errh)
{
    Switch *sw = (Switch *)e;
    int sw_output;
    if (!IntArg().parse(s, sw_output))
	return errh-&amp;gt;error(&quot;Switch output must be integer&quot;);
    if (sw_output &amp;gt;= sw-&amp;gt;noutputs())
	sw_output = -1;
    sw-&amp;gt;_output = sw_output;
    return 0;
}

void
Switch::add_handlers()
{
    add_read_handler(&quot;switch&quot;, read_param, 0);
    add_write_handler(&quot;switch&quot;, write_param, 0, Handler::h_nonexclusive);
    add_read_handler(&quot;config&quot;, read_param, 0);
    set_handler_flags(&quot;config&quot;, 0, Handler::CALM);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By adding handlers to element &lt;code class=&quot;highlighter-rouge&quot;&gt;Switch&lt;/code&gt;, the Switch attributes &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; can be read or changed by reading/writing files &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/click/&amp;lt;switch_obj&amp;gt;/switch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/click/&amp;lt;switch_obj&amp;gt;/config&lt;/code&gt; at run time, if Click is running in Linux kernel.&lt;/p&gt;

&lt;h3 id=&quot;a-namepacketpacketsa&quot;&gt;&lt;a name=&quot;packet&quot;&gt;Packets&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A Click Packet consists of a small packet header and the actual packet data – the packet header points to the data. In the Linux kernel driver, Click packet objects are equivalent to sk_buffs, which avoids translation or indirection overhead when communicating with device drivers or the kernel itself.&lt;/p&gt;

&lt;p&gt;Several packet headers may share the same packet data. When copying a packet, Click produces a new packet header that shares the original data. Shared packet data is copy-on-write. Elements that modify packet data first ensure that it is unshared; if it is shared, the element will make a unique copy of the data and change the packet header to point to that copy. Packet headers are never shared, so header modifications never cause a copy.&lt;/p&gt;

&lt;p&gt;Headers contain a number of annotations in addition to a pointer to the packet data. Some annotations contain information independent of the packet data - for example, the time when the packet arrived. Other annotations cache information about the data, i.e, the CheckIPHeader element sets the IP header annotation on passing IP packets.&lt;/p&gt;

&lt;p&gt;In Linux, the sk_buff is defined as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct sk_buff {
	/* These two members must be first. */
	struct sk_buff		*next;
	struct sk_buff		*prev;

        …...

	ktime_t			tstamp;

	struct sock		*sk;
	struct net_device	*dev;

	/*
	 * This is the control buffer. It is free to use for every
	 * layer. Please put your private variables there. If you
	 * want to keep them across layers you have to do a skb_clone()
	 * first. This is owned by whoever has the skb queued ATM.
	 */
#ifdef __LP64__
	char			cb[96] __aligned(8);
#else
	char			cb[80] __aligned(8);
#endif

	unsigned long		_skb_refdst;
#ifdef CONFIG_XFRM
	struct	sec_path	*sp;
#endif
	unsigned int		len,
				data_len;
	__u16			mac_len,
				hdr_len;
	union {
		__wsum		csum;
		struct {
			__u16	csum_start;
			__u16	csum_offset;
		};
	};
	__u32			priority;
	kmemcheck_bitfield_begin(flags1);
	__u8			local_df:1,
				cloned:1,
				ip_summed:2,
				nohdr:1,
				nfctinfo:3;
	__u8			pkt_type:3,
				fclone:2,
				ipvs_property:1,
				peeked:1,
				nf_trace:1;
	kmemcheck_bitfield_end(flags1);
	__be16			protocol;

	void			(*destructor)(struct sk_buff *skb);
        ……..

	int			skb_iif;

	__u32			rxhash;

	__u16			vlan_tci;

        ……..

	sk_buff_data_t		transport_header;
	sk_buff_data_t		network_header;
	sk_buff_data_t		mac_header;
	/* These elements must be at the end, see alloc_skb() for details.  */
	sk_buff_data_t		tail;
	sk_buff_data_t		end;
	unsigned char		*head,
				*data;
	unsigned int		truesize;
	atomic_t		users;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Click Packet is defined as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Packet {
…...
private:

    // Anno must fit in sk_buff&#39;s char cb[48].
    /** @cond never */
    union Anno {
	char c[anno_size];
	uint8_t u8[anno_size];
	uint16_t u16[anno_size / 2];
	uint32_t u32[anno_size / 4];
#if HAVE_INT64_TYPES
	uint64_t u64[anno_size / 8];
#endif
	// allocations: see packet_anno.hh
    };

#if !CLICK_LINUXMODULE
    // All packet annotations are stored in AllAnno so that
    // clear_annotations(true) can memset() the structure to zero.
    struct AllAnno {
	Anno cb;
	unsigned char *mac;
	unsigned char *nh;
	unsigned char *h;
	PacketType pkt_type;
	Timestamp timestamp;
	Packet *next;
	Packet *prev;
	AllAnno()
	    : timestamp(Timestamp::uninitialized_t()) {
	}
    };
#endif
    /** @endcond never */

#if !CLICK_LINUXMODULE
    // User-space and BSD kernel module implementations.
    atomic_uint32_t _use_count;
    Packet *_data_packet;
    /* mimic Linux sk_buff */
    unsigned char *_head; /* start of allocated buffer */
    unsigned char *_data; /* where the packet starts */
    unsigned char *_tail; /* one beyond end of packet */
    unsigned char *_end;  /* one beyond end of allocated buffer */
# if CLICK_BSDMODULE
    struct mbuf *_m;
# endif
    AllAnno _aa;
…...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Obviously, both Linux &lt;code class=&quot;highlighter-rouge&quot;&gt;sk_buff&lt;/code&gt; and Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Packet&lt;/code&gt; class have similiar elements, like hearder, data and tail of a packet.&lt;/p&gt;

&lt;h3 id=&quot;a-nameconnectconnectionsa&quot;&gt;&lt;a name=&quot;connect&quot;&gt;Connections&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Each Click connection represents a possible path for packet transfer between elements. Connections are represented as pointers to element objects, and passing a packet along a connection is implemented by a single virtual function call(push or pull). Each connection links a source port to a destination port. The source port is always an output port, and the destination port is always an input port.&lt;/p&gt;

&lt;p&gt;Connections link ports, but not elements. Each element may have many ports. If a path exists from an output port o to an input port i in the port graph representation of a router configuration, then we say that i is downstream of o, and conversely, that o is upstream of i.&lt;/p&gt;

&lt;p&gt;Click supports two kinds of connections, push and pull. On a push connection, packets start at the source element and are passed downstream to the destination element. On a pull connection, in contrast, the destination element initiates packet transfer: it asks the source element to return a packet, or a null pointer if no packet is available. These packet transfers are implemented by two virtual function calls, push and pull.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.bo-yang.net//assets/images/click_notes/click_connections.png&quot; alt=&quot;Click Connections&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connections between two push ports are push, and connections between two pull ports are pull. Connections between a push port and a pull port are illegal. For agnostic ports, they behave as push when connected to push ports and pull when connected to pull ports(Null elements in above picture). In the above picture, Queue element has a push input port and a pull output port - the input port respond to pushed packets by enqueueing them, and the output port responds to pull requests by dequeuing packets and returning them.&lt;/p&gt;

&lt;h3 id=&quot;a-namerefreferencesa&quot;&gt;&lt;a name=&quot;ref&quot;&gt;References&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/papers/click:kohler-phd/thesis.pdf&quot;&gt;Eddie Kohler, &lt;em&gt;The Click modular router&lt;/em&gt;, Ph.D. thesis, MIT, November 2000. This has more detail and examples than the TOCS and SOSP papers of the same name.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://read.cs.ucla.edu/click/&quot;&gt;http://read.cs.ucla.edu/click/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pats.ua.ac.be/software/click/&quot;&gt;http://www.pats.ua.ac.be/software/click/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html&quot;&gt;https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Dec 2014 00:00:00 -0800</pubDate>
        <link>http://www.bo-yang.net//notes/network/2014/12/23/click-notes-overview/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//notes/network/2014/12/23/click-notes-overview/</guid>
      </item>
    
      <item>
        <title>Building Remote+Local *nix Develop Environment(II)</title>
        <description>&lt;p&gt;&lt;em&gt;This is the second article(collection) on how to build a *nix development environment by integrating remote servers and local Linux/Mac clients. For the previous article on this topic, please refer to &lt;a href=&quot;http://www.bo-yang.net/2014/10/21/remote-local-linux-develop-env/&quot;&gt;Building Remote+Local *nix Develop Environment&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;vim-tips--plugins&quot;&gt;1. Vim Tips &amp;amp; Plugins&lt;/h3&gt;

&lt;h4 id=&quot;highlight-all-instances-of-word-under-cursor&quot;&gt;1.1 Highlight All Instances of Word Under Cursor&lt;/h4&gt;

&lt;p&gt;Add following line into your &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.vimrc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd CursorMoved * exe printf(&#39;match IncSearch /\V\&amp;lt;%s\&amp;gt;/&#39;, escape(expand(&#39;&amp;lt;cword&amp;gt;&#39;), &#39;/\&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or use a more complicated one in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; Highlight all instances of word under cursor, when idle.
&quot; Useful when studying strange source code.
&quot; Type z/ to toggle highlighting on/off.

nnoremap z/ :if AutoHighlightToggle()&amp;lt;Bar&amp;gt;set hls&amp;lt;Bar&amp;gt;endif&amp;lt;CR&amp;gt;
function! AutoHighlightToggle()
  let @/ = &#39;&#39;
  if exists(&#39;#auto_highlight&#39;)
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo &#39;Highlight current word: off&#39;
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = &#39;\V\&amp;lt;&#39;.escape(expand(&#39;&amp;lt;cword&amp;gt;&#39;), &#39;\&#39;).&#39;\&amp;gt;&#39;
    augroup end
    setl updatetime=500
    echo &#39;Highlight current word: ON&#39;
    return 1
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;automatically-load-ctags&quot;&gt;1.2 Automatically Load Ctags&lt;/h4&gt;

&lt;p&gt;If you have generated ctags file, then you can automatically load it by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;export &lt;code class=&quot;highlighter-rouge&quot;&gt;CTAGS_TAG&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.bashrc&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;export CTAGS_TAG=/path/to/your/tags&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add following lines into your &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.vimrc&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```Shell&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if filereadable($CTAGS_TAG)
    set tags=$CTAGS_TAG
endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h4 id=&quot;most-recently-usedmru-files&quot;&gt;1.3 Most Recently Used(MRU) Files&lt;/h4&gt;

&lt;p&gt;If you want to access the most recently used files in Vim, you need plugin &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=521&quot;&gt;MRU&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;:MRU&lt;/code&gt; command will show you all the recently used files, and you can choose a file and press &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; to open it in current window. In addition&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To open a file from the MRU window in a new tab, press the &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; key.&lt;/li&gt;
  &lt;li&gt;You can open multiple files from the MRU window by specifying a count before pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can close the MRU window by pressing the &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; key or the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; key or using one of the Vim window commands.&lt;/li&gt;
  &lt;li&gt;You can specify a pattern to the &lt;code class=&quot;highlighter-rouge&quot;&gt;:MRU&lt;/code&gt; command, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;:MRU &amp;lt;pattern&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pathogenhttpsgithubcomtpopevim-pathogen&quot;&gt;1.4 &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Vim &lt;code class=&quot;highlighter-rouge&quot;&gt;runtimepath&lt;/code&gt; manager, widely used by many plugins. Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;call pathogen#infect()&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;, then any plugins you wish to install can be extracted to a subdirectory under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/bundle&lt;/code&gt;. And they will be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;runtimepath&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;nerdtreehttpsgithubcomscrooloosenerdtree--nerdtree-tabshttpsgithubcomjistrvim-nerdtree-tabs&quot;&gt;1.5 &lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot;&gt;NERDTree&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/jistr/vim-nerdtree-tabs&quot;&gt;NERDTree Tabs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;The NERD tree allows you to explore your filesystem and to open files and directories, and NERDTree Tabs can make NERDTree available for all Vim tabs(sometimes it is useful). After installing the these plugins, you can add the following lines to &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; Nerd Tree
&quot; let g:NERDTreeDirArrows=0 &quot; Do not use new arrows for directories
map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
let g:nerdtree_tabs_open_on_gui_startup=0 &quot; no nerdtree_tabs by default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For some Linux distributions, the NERDTree could not show arrows for directories, then you need to uncomment the line &lt;code class=&quot;highlighter-rouge&quot;&gt;let g:NERDTreeDirArrows=0&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;supertabhttpsgithubcomervandewsupertab&quot;&gt;1.6 &lt;a href=&quot;https://github.com/ervandew/supertab&quot;&gt;Supertab&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Supertab is a vim plugin which allows you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; for all your insert completion needs (:help ins-completion).&lt;/p&gt;

&lt;h4 id=&quot;ctrlphttpkiengithubioctrlpvim--command-thttpsgithubcomwincentcommand-t&quot;&gt;1.7 &lt;a href=&quot;http://kien.github.io/ctrlp.vim/&quot;&gt;CtrlP&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/wincent/Command-T&quot;&gt;Command-T&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;These two plugins are used for searching/opening files(even not in ctags) in Vim. CtrlP is written in pure Vimscript, so it is very slow. Although Command-T is faster, it relies on Ruby, which makes it difficult to install. Actually, I rarely use them in daily work.&lt;/p&gt;

&lt;p&gt;My &lt;code class=&quot;highlighter-rouge&quot;&gt;vimrc&lt;/code&gt; can be found at &lt;a href=&quot;https://github.com/bo-yang/misc/blob/master/vimrc&quot;&gt;https://github.com/bo-yang/misc/blob/master/vimrc&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cscopehttpcscopesourceforgenet&quot;&gt;2. &lt;a href=&quot;http://cscope.sourceforge.net/&quot;&gt;Cscope&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Cscope is a tool for browsing source code. You can either run cscope standalone or &lt;a href=&quot;http://cscope.sourceforge.net/cscope_vim_tutorial.html&quot;&gt;use it with Vim&lt;/a&gt;. No matter in which way, you need to generate cscope database first. And the cscope DB depends on the source files you specified. General steps of using cscope are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find /my/project/dir -name &#39;*.c&#39; -o -name &#39;*.h&#39; &amp;gt; /foo/cscope.files
cd /foo
cscope -b
CSCOPE_DB=/foo/cscope.out; export CSCOPE_DB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In Vim, you can load cscope DB by command &lt;code class=&quot;highlighter-rouge&quot;&gt;:cs add &amp;lt;path_to_cscope_db&amp;gt;&lt;/code&gt;. For more cscope operations in Vim, please run command &lt;code class=&quot;highlighter-rouge&quot;&gt;:cs help&lt;/code&gt;. To automatically load cscope into Vim, you can export &lt;code class=&quot;highlighter-rouge&quot;&gt;CSCOPE_DB&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.bashrc&lt;/code&gt;, such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export CSCOPE_DB=/path/to/cscope.out
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;CSCOPE_DB&lt;/code&gt; will be automatically loaded every time you run Vim.&lt;/p&gt;

&lt;p&gt;To save the effort of building cscope DB, I wrote a cross-platform(Linux &amp;amp; Mac OS X) wrapper script, which can be found in my &lt;a href=&quot;https://github.com/bo-yang/misc/blob/master/gen_cscope_ctags&quot;&gt;GitHub channel&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sshfs-wrapper&quot;&gt;3. sshfs Wrapper&lt;/h3&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;sshfs&lt;/code&gt; command requires too much parameters, and things will be worse when the network is not stable. Following script will ease your pain.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your_name&amp;gt;
&lt;span class=&quot;nv&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;your_server&amp;gt;
&lt;span class=&quot;nv&quot;&gt;remote_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/nobackup/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/Documents/VMs

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -d &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -o ! -s &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;sudo umount -f &lt;span class=&quot;nv&quot;&gt;$local_dir&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
sshfs &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;@&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remote_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 19 Dec 2014 00:00:00 -0800</pubDate>
        <link>http://www.bo-yang.net//unix/linux/notes/2014/12/19/remote-local-linux-develop-env-2/</link>
        <guid isPermaLink="true">http://www.bo-yang.net//unix/linux/notes/2014/12/19/remote-local-linux-develop-env-2/</guid>
      </item>
    
  </channel>
</rss>
